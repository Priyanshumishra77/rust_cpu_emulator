use std::str::FromStr;
use crate::ast::{Operand, Instr, Data, Section, Assembly, Directive, TextLine, DataLine, Label,Preamble};

// https://gist.github.com/brendanzab/4c5e5e1836ecc3a46afd05ed046c695c

grammar;

Integer: u64 = {
    r"[0-9]+" => u64::from_str(<>).unwrap()
};

Mnemonic: String = {
    r"[a-zA-Z]+" => String::from(<>),
};

VariableName: String = {
    r"[a-zA-Z]+" => String::from(<>),
};


Operand_Sep: () = {
    ","  => (),
}

LabelName: String = {
    r"[a-zA-Z]+" => String::from(<>),
}

DirectiveName: String = {
    r"\.[a-zA-Z]+" => String::from(<>),
}

Operand: Operand = {
    Register,
    Immediate,
//    MemoryAccess,
}

Register: Operand = {
    "r" <Integer> => Operand::Register(<>),
};

Immediate: Operand = {
    "#" <Integer> => Operand::Immediate(<>),
};

Directive: Directive = {
   ".global" <l:LabelName> => Directive::Global(l),
}

DataLine: DataLine = {
    Data => DataLine::Data(<>),
    Directive => DataLine::Directive(<>)
}

Section:Section = {
    DataSection,
    TextSection
}

Data: Data = {
    <n:VariableName> ":" ".word" <v:Integer> => Data{name:n,value:v}
}

DataSection:Section = {
    ".data" <DataLine+> => Section::Data(<>),
    ".section" ".data" <DataLine+> => Section::Data(<>),
}

Label: Label = {
    <n:LabelName> ":" => Label{name:n},
}

Instr: Instr = {
   <m:Mnemonic>  <o1:Operand> Operand_Sep <o2:Operand> Operand_Sep <o3:Operand>
        => Instr{mnemonic:m, op1:o1, op2:o2, op3:o3},
}

TextSection: Section = {
    ".text" <TextLine+> => Section::Text(<>),
    ".section" ".text" <TextLine+> => Section::Text(<>),
}

TextLine: TextLine = {
    Instr => TextLine::Text(<>),
    Directive => TextLine::Directive(<>),
    Label => TextLine::Label(<>),
}

Preamble: Preamble ={
    Directive* => Preamble{directives:<>},
}

pub Assembly:Assembly = {
    <p:Preamble> <s:Section*> => Assembly{preamble:p, sections:s},
}