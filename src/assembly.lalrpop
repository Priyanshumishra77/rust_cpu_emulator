use std::str::FromStr;
use crate::ast::{Operand, Instr, Data, Section, Assembly};

grammar;

Integer: u64 = {
    r"[0-9]+" => u64::from_str(<>).unwrap()
};

Mnemonic: String = {
    r"[a-zA-Z]+" => String::from(<>),
};

VariableName: String = {
    r"[a-zA-Z]+" => String::from(<>),
};


Operand_Sep: () = {
    ","  => (),
}

Newline: () = {
    r"\n" => (),
};


Operand: Operand = {
    Register,
    Immediate,
//    MemoryAccess,
}

Register: Operand = {
    "r" <Integer> => Operand::Register(<>),
};

Immediate: Operand = {
    "#" <Integer> => Operand::Immediate(<>),
};


Instr: Instr = {
   <m:Mnemonic>  <o1:Operand> Operand_Sep <o2:Operand> Operand_Sep <o3:Operand>
        => Instr{mnemonic:m, op1:o1, op2:o2, op3:o3},
}

Data: Data = {
    <n:VariableName> ":" ".word" <v:Integer> => Data{name:n,value:v}
}

DataSection:Section = {
    ".data" <Data+> => Section::Data(<>),
}

TextSection: Section = {
    ".text" <Instr+> => Section::Text(<>),
}

Section:Section = {
    DataSection,
    TextSection
}

pub Assembly:Assembly = {
    Section* => Assembly{section:<>},
}