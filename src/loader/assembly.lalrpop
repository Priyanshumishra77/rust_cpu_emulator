use std::str::FromStr;
use crate::loader::ast::{Operand, Instr, Data, Section, Assembly, Directive, TextLine, DataLine, Label,Preamble};
use crate::cpu::{SP,FP,LR,PC};
// https://gist.github.com/brendanzab/4c5e5e1836ecc3a46afd05ed046c695c

grammar;

Integer: u64 = {
    r"[0-9]+" => u64::from_str(<>).unwrap()
};

Mnemonic: String = {
    r"[a-zA-Z]+" => String::from(<>),
};

VariableName: String = {
    r"[a-zA-Z]+" => String::from(<>),
};

Operand_Sep: () = {
    ","  => (),
}

LabelName: String = {
    r"[a-zA-Z]+" => String::from(<>),
}

DirectiveName: String = {
    r"\.[a-zA-Z]+" => String::from(<>),
}

Operand: Operand = {
    Register,
    Immediate,
    LabelOperand,
    //MemoryAccess,
}
//
//MemoryAccess: Operand = {
//     "[" <r:Register> "]" => Operand::MemoryAccess(r),
//}

Register: Operand = {
    // todo: r 1 is allowed register name which isn't correct
    <start:@L> "r" <v:Integer> => Operand::Register(v, start),
    <start:@L> "fp"          => Operand::Register(FP as u64, start),
    <start:@L> "sp"          => Operand::Register(SP as u64, start),
    <start:@L> "lr"          => Operand::Register(LR as u64, start),
    <start:@L> "pc"          => Operand::Register(PC as u64, start)
};

Immediate: Operand = {
   // # todol space allowed and not good
    //"#" <Integer> => Operand::Immediate(<>),
    <start:@L> "#" <i:Integer> => Operand::Immediate(i, start),
};

LabelOperand: Operand = {
     <start:@L> <l:LabelName> => Operand::Label(l, start),
};

Directive: Directive = {
   <start:@L> ".global" <l:LabelName> => Directive::Global(l, start),
}

DataLine: DataLine = {
    Data => DataLine::Data(<>),
    Directive => DataLine::Directive(<>)
}

Section:Section = {
    DataSection,
    TextSection
}

Data: Data = {
    <start:@L> <n:VariableName> ":" ".word" <v:Integer> => Data{name:n, value:v, pos:start}
}

DataSection:Section = {
    ".data" <DataLine+>                 => Section::Data(<>),
    ".section" ".data" <DataLine+>      => Section::Data(<>),
}

Label: Label = {
    <start:@L> <n:LabelName> ":" => Label{name:n, pos:start},
}

Instr: Instr = {
//   <start:@L> <m:Mnemonic>
//            => Instr{mnemonic:m, op1:Operand::Unused(), op2:Operand::Unused(), op3:Operand::Unused()},
   <start:@L> <m:Mnemonic>  <o1:Operand>
             => Instr{mnemonic:m, op1:o1, op2:Operand::Unused(), op3:Operand::Unused(), pos:start},
   <start:@L> <m:Mnemonic>  <o1:Operand> Operand_Sep <o2:Operand>
             => Instr{mnemonic:m, op1:o1, op2:o2, op3:Operand::Unused(), pos:start},
   <start:@L> <m:Mnemonic>  <o1:Operand> Operand_Sep <o2:Operand> Operand_Sep <o3:Operand>
             => Instr{mnemonic:m, op1:o1, op2:o2, op3:o3, pos:start},
}

TextSection: Section = {
    ".text" <TextLine+>             => Section::Text(<>),
    ".section" ".text" <TextLine+>  => Section::Text(<>),
}

TextLine: TextLine = {
    Instr                           => TextLine::Text(<>),
    Directive                       => TextLine::Directive(<>),
    Label                           => TextLine::Label(<>),
}

Preamble: Preamble ={
    Directive* => Preamble{directives:<>},
}

pub Assembly:Assembly = {
    <p:Preamble> <s:Section*> => Assembly{preamble:p, sections:s},
}