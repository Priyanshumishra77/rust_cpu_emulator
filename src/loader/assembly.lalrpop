use std::str::FromStr;
use crate::loader::ast::{_Operand, _Instr, _Data, _Section, _Assembly, _Directive, _TextLine, _DataLine, _Label,_Preamble};
use crate::cpu::{SP,FP,LR,PC};
// https://gist.github.com/brendanzab/4c5e5e1836ecc3a46afd05ed046c695c

grammar;

Integer: u64 = {
    r"[0-9]+" => u64::from_str(<>).unwrap()
};

Mnemonic: String = {
    r"[a-zA-Z]+" => String::from(<>),
};

VariableName: String = {
    r"[a-zA-Z]+" => String::from(<>),
};

Operand_Sep: () = {
    ","  => (),
}

LabelName: String = {
    r"[a-zA-Z]+" => String::from(<>),
}

DirectiveName: String = {
    r"\.[a-zA-Z]+" => String::from(<>),
}

Operand: _Operand = {
    Register,
    Immediate,
    LabelOperand,
    //MemoryAccess,
}
//
//MemoryAccess: Operand = {
//     "[" <r:Register> "]" => Operand::MemoryAccess(r),
//}

Register: _Operand = {
    <start:@L> <r:r"r[0-9]+">   =>
                                {
                                    let mut s = String::from(r);
                                    s.remove(0);
                                    _Operand::Register(s.parse::<u64>().unwrap(), start)
                                },
    <start:@L>  "fp"            => _Operand::Register(FP as u64, start),
    <start:@L>  "sp"            => _Operand::Register(SP as u64, start),
    <start:@L>  "lr"            => _Operand::Register(LR as u64, start),
    <start:@L>  "pc"            => _Operand::Register(PC as u64, start)
};

Immediate: _Operand = {
   // # todol space allowed and not good
    //"#" <Integer> => Operand::Immediate(<>),
    <start:@L> "#" <i:Integer> => _Operand::Immediate(i, start),
};

LabelOperand: _Operand = {
     <start:@L> <l:LabelName> => _Operand::Label(l, start),
};

Directive: _Directive = {
   <start:@L> ".global" <l:LabelName> => _Directive::Global(l, start),
}

DataLine: _DataLine = {
    Data => _DataLine::Data(<>),
    Directive => _DataLine::Directive(<>)
}

Section:_Section = {
    DataSection,
    TextSection
}

Data: _Data = {
    <start:@L> <n:VariableName> ":" ".word" <v:Integer> => _Data{name:n, value:v, pos:start}
}

DataSection:_Section = {
    ".data" <DataLine+>                 => _Section::Data(<>),
    ".section" ".data" <DataLine+>      => _Section::Data(<>),
}

Label: _Label = {
    <start:@L> <n:LabelName> ":" => _Label{name:n, pos:start},
}

Instr: _Instr = {
//   <start:@L> <m:Mnemonic>
//            => Instr{mnemonic:m, op1:Operand::Unused(), op2:Operand::Unused(), op3:Operand::Unused()},
   <start:@L> <m:Mnemonic>  <o1:Operand>
             => _Instr{mnemonic:m, op1:o1, op2:_Operand::Unused(), op3:_Operand::Unused(), pos:start},
   <start:@L> <m:Mnemonic>  <o1:Operand> Operand_Sep <o2:Operand>
             => _Instr{mnemonic:m, op1:o1, op2:o2, op3:_Operand::Unused(), pos:start},
   <start:@L> <m:Mnemonic>  <o1:Operand> Operand_Sep <o2:Operand> Operand_Sep <o3:Operand>
             => _Instr{mnemonic:m, op1:o1, op2:o2, op3:o3, pos:start},
}

TextSection: _Section = {
    ".text" <TextLine+>             => _Section::Text(<>),
    ".section" ".text" <TextLine+>  => _Section::Text(<>),
}

TextLine: _TextLine = {
    Instr                           => _TextLine::Text(<>),
    Directive                       => _TextLine::Directive(<>),
    Label                           => _TextLine::Label(<>),
}

Preamble: _Preamble ={
    Directive* => _Preamble{directives:<>},
}

pub Assembly:_Assembly = {
    <p:Preamble> <s:Section*> => _Assembly{preamble:p, sections:s},
}