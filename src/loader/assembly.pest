whitespace = _{ (" " | "\t")+ }

new_line = _{ "\n" }

comma = _{ "," }

arg_sep = _{ whitespace? ~ comma ~ whitespace?}

empty_line = _{ whitespace? ~ comment? ~ new_line }

alpha = { 'a'..'z' | 'A'..'Z' }

digit = { '0'..'9' }

comment = _{ ";" ~ (!"\n" ~ ANY)* }

memory_access = {"[" ~ ( variable_name | register )  ~ "]"}

register = { ( ^"r" ~ integer) | ^"sp" }

label_name = { (alpha | digit | "_" )+ }

variable_name = { alpha ~ (alpha | digit| "_" )* }

integer = { digit+ }

immediate = { "#" ~ digit+ }

file = _{ SOI ~ assembly ~ EOI }

assembly = _{ empty_line* ~ data_section? ~ global_section }

data_section = _{ whitespace? ~ ".data" ~ whitespace? ~ comment? ~ data_line*}

data_line = _{ new_line ~ whitespace? ~ data ~ whitespace? ~ comment?}

data = { variable_name ~ whitespace ~ "DCD" ~ whitespace ~ integer}

global_section = _{ new_line ~  whitespace? ~ ".global" ~ whitespace? ~ comment? ~ (global_line | empty_line)* }

global_line = _{ new_line ~ whitespace? ~ ( instr | label ) ~ whitespace? ~ comment? }

label = { label_name ~ ":" }

instr = _{  ( instr_LDR
            | instr_STR
            | instr_MOV
            | instr_AND
            | instr_ORR
            | instr_EOR
            | instr_ADD
            | instr_SUB
            | instr_MUL
            | instr_SDIV
            | instr_PRINTR
            | instr_NOP
            | instr_EXIT
            | instr_JNZ
            | instr_JZ
            | instr_PUSH
            | instr_POP
            | instr_NOT
            | instr_BL
            | instr_RET
            )}


instr_ADD       = {^"ADD"    ~ whitespace ~ register ~ arg_sep ~ register ~ arg_sep ~ (register|immediate)       }
instr_SUB       = {^"SUB"    ~ whitespace ~ register ~ arg_sep ~ register ~ arg_sep ~  (register|immediate)      }
instr_NEG       = {^"NEG"    ~ whitespace ~ register ~ whitespace ~ register                                     }
instr_SDIV      = {^"SDIV"   ~ whitespace ~ register ~ arg_sep ~ register ~ arg_sep ~  (register|immediate)      }
instr_MUL       = {^"MUL"    ~ whitespace ~ register ~ arg_sep ~ register ~ arg_sep ~  (register|immediate)      }
// bitwise logical instructions
instr_AND       = {^"AND"    ~ whitespace ~ register ~ arg_sep ~ register ~ arg_sep ~  (register|immediate)      }
instr_ORR       = {^"ORR"    ~ whitespace ~ register ~ arg_sep ~ register ~ arg_sep ~  (register|immediate)      }
instr_EOR       = {^"EOR"    ~ whitespace ~ register ~ arg_sep ~ register ~ arg_sep ~  (register|immediate)      }
instr_NOT       = {^"NOT"    ~ whitespace ~ register ~ arg_sep ~ register ~ arg_sep ~ register                   }
// conditional jumps
instr_JNZ       = {^"JNZ"    ~ whitespace ~ register ~ arg_sep ~ label_name                                      }
instr_JZ        = {^"JZ"     ~ whitespace ~ register ~ arg_sep ~ label_name                                      }
// stack operations
instr_PUSH      = {^"PUSH"   ~ whitespace ~ register                                                             }
instr_POP       = {^"POP"    ~ whitespace ~ register                                                             }
// various
instr_PRINTR    = {^"PRINTR" ~ whitespace ~ register                                                             }
instr_NOP       = {^"NOP"                                                                                        }
instr_EXIT      = {^"EXIT"                                                                                       }
// memory & register copying
instr_LDR       = {^"LDR"   ~ whitespace ~ register  ~ arg_sep ~ memory_access                                   }
instr_STR       = {^"STR"   ~ whitespace ~ register ~ arg_sep ~ memory_access                                    }
instr_MOV       = {^"MOV"   ~ whitespace ~ register ~ arg_sep ~  (register|immediate)                            }
// procedure call
instr_BL        = {^"BL"  ~ whitespace ~ label_name                                                              }
instr_RET       = {^"RET"                                                                                        }