TODO

- only in .data, can one have data lines

- only in .text can one have text lines

- loader: multiline comment

- include file name in parse error

- add label operand: so that the label can be replaced later, instead of immediate?
    - the problem is that you don't loose track of the label later.
    - perhaps code operand should have both a value and a label? This way we can initially set the label
      and later fix the address.

- instruction print should use labels

- instructions should keep their labels

- how does the 'exit' work; you don't want to roll to the next instruction which could be e.g. a function label

- remove 'exit': there should not be need for exit; if program has reached last line.. then exit is implied

- loader: every instruction should have an optional label in front of it

- implement CMP

- implement BE

- implement BNE

- how does the 'exit' work; you don't want to roll to the next instruction which could be e.g. a function label

- remove 'exit': there should not be need for exit; if program has reached last line.. then exit is implied

- .global should have a start label

- Operand: Indexed

- Operand: Indirect

- store to load forwarding: currently the store in the sb isn't seen

- loader: every instruction should have an optional label in front of it

- memory access should not just be a variable, but could be some expression with one or more registers

- loader: validate memory access

- loader: validate variable declaration that it fits in memory

- loader: should not panic on error, but propagate the error to the main

- implement print of memory

DONE


- loader: control the directives.

- loader: the current grammar rules expect a new line at the beginning which is a problem for the first grammar rule since it will match
with the SOI

- loader: empty lines are causing parse problems

- .data section should be optional

.section .text

- program should have start label

- loader: validate label of .global

- change comment from ; to @

- .global should have a start label

- add CBZ

- add CBNZ

- fix bug in BX
     - so the next instruction doesn't get picked up by the frontend.

- frontend should use the PC for tracking the instruction pointer.

- any control instruction should only modify the IP when retiring; not earlier.

- there should be detection if an instruction is interacting with the PC register

- BL should update LR + PC

- B should update PC

- BX should update PC

- remove JE

- remove JNZ

- loader: access to FP

- add BX

- fix 'RET'

- SP should point to R13

- LR should point to R14

- PC should point to R15

- add 'B' for unconditional branch

- call --> BL

- remove INC

- remove DEC

- loader: register validation

- good Display for SP

- loader: access to RSP

- number of architectural registers should be fixed.

- loader: many operators can now deal with direct value direct value

- NEG <destination>, <source>

- rename DIV to SDIV

- remove MOD

- rename XOR to EOR

- rename OR to ORR

- ugly debug string
Executing LDR Memory(1) Register(2) line=8
Executing LDR Memory(0) Register(1) line=7

- More ARM like syntax
