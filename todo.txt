TODO

- loader: label names with underscores

- loader: variable names with underscores

- loader: ast operand should have access to its pos

- loader: every instruction should have an optional label in front of it

- loader: case insensitive keywords/registers

- loader: single line comments

- loader: multiline comment

- loader: comments

- loader: new lines

- loader: unwanted semicolon after instructions

- labels: unwanted behavior that labels need to start with an _ Even though it isn't part of a label name

- add label operand: so that the label can be replaced later, instead of immediate?
    - the problem is that you don't loose track of the label later.
    - perhaps code operand should have both a value and a label? This way we can initially set the label
      and later fix the address.

- instruction print should use labels

- instructions should keep their labels

- implement CMP

- implement BE

- implement BNE

- Operand: Indexed

- Operand: Indirect

- store to load forwarding: currently the store in the sb isn't seen

- loader: every instruction should have an optional label in front of it

- memory access should not just be a variable, but could be some expression with one or more registers

- loader: validate memory access

- implement print of memory

DONE

- MemRegisterIndirect

- Top of RAM: The stack typically grows downward from the top of the RAM. This means that the initial stack pointer (SP) is set to the highest address of the available RAM.

- problem mov

- loader: memory access

- loader: add address of

- how does the 'exit' work; you don't want to roll to the next instruction which could be e.g. a function label

- remove 'exit': there should not be need for exit; if program has reached last line.. then exit is implied

- loader: validate variable declaration that it fits in memory

- stack and heap should come from the same chunk of memory, but start on opposite site and grow towards each other.

- loader: should not panic on error, but propagate the error to the main

- .global should have a start label

- loader: a variable can't be a label and vice versa.

- loader: there should only be 1 .text section

- loader: AST assembly ---> assembly_file or something.

- loader: visitor should have boolean return type to stop

- loader: the implicit operands are not set like PC, SP etc.

- loader: fix Unrecognized token '1' at 22:8. Expected: ["\":\""]

- loader: a variable name with a number, fails..

- loader: check for variables declaration in symbol scan with visitor

- loader: check for label declaration in symbol scan with visitor

- loader: register name can't have spaces in between

- loader: instruction should have access to pos